#ifndef __AFXWAPI__
#define __AFXWAPI__
/**
 * [変更履歴]
 * #001 256→MAXPATH
 * #002 delete dummy
 * #003 windowId BYTE→LONG
 * #004 szWildName削除 (あふw側でやってもらう)
 * #005 初期相対ディレクトリとタイトル指定を追加
 * #006 初版のため省略
 * #007 ApiInternalCopy()を追加
 * #008 ApiInternalCopy -> ApiIntCopyTo
 */

#include "windows.h"

#define API_MAX_PLUGIN_NAME_LENGTH	63
#define API_MAX_AUTHOR_NAME_LENGTH	31
#define API_MAX_PATH_LENGTH			MAX_PATH // #001 256→MAXPATH
#define AFXW_WINDOW_ID_SRC			0
#define AFXW_WINDOW_ID_DST			1

#define MAKE_VERSION(major, minor, revision, build)	\
		( (major    & 0xFF) << 24) | ( (minor & 0xFF) << 16) | \
		( (revision & 0xFF) << 8 ) | ( (build & 0xFF)      )

#define APISUCCESS(ret)				(ret == 1)
#define APIFAILE(ret)				(ret == 0)

#pragma pack(push, 1)

typedef HGLOBAL HAFX;

/**
 * あふw側から渡される情報
 */
typedef struct {
	HWND		hWnd;		// あふwのウィンドウハンドル
	DWORD		windowId;	// AFXW_WINDOW_ID_* #003
	LPVOID		Reserv[8];	// #006
} AfxwInfo, *lpAfxwInfo;

/**
 * プラグイン情報
 */
typedef struct {
	WCHAR		szPluginName[API_MAX_PLUGIN_NAME_LENGTH + 1];
	WCHAR		szAuthorName[API_MAX_AUTHOR_NAME_LENGTH + 1];
	DWORD		dwVersion;
	DWORD		dwReserv1;
	DWORD		dwReserv2;
	DWORD		dwReserv3;
	DWORD		dwReserv4;
} ApiInfo, *lpApiInfo;

/**
 * ApiOpenで返す情報
 * #005 ApiFindFirst()のszDirPathには、「基準ディレクトリ」＋「初期相対ディレクトリ」が
 * #005 渡される。「初期相対ディレクトリ」が「ルート（/)」より上に行くとプラグインを抜ける。
 */
typedef struct {
	WCHAR		szBaseDir[MAX_PATH];    // 基準パス
	WCHAR		szInitRelDir[MAX_PATH]; // 相対パス #005
	WCHAR		szTitle[64];            // タイトル #005
	DWORD		dwReserv1;
	DWORD		dwReserv2;
	DWORD		dwReserv3;
	DWORD		dwReserv4;
} ApiOpenInfo, *lpApiOpenInfo;

/**
 * アイテム情報
 */
typedef struct {
	WCHAR		szItemName[API_MAX_PATH_LENGTH];
	ULONGLONG	ullItemSize;
	FILETIME 	ullTimestamp;
	DWORD		dwAttr;			// FindFirstFileやGetFileAttributesと同値(FILE_ATTRIBUTE_*)
	DWORD		dwReserv1;
	DWORD		dwReserv2;
	DWORD		dwReserv3;
	DWORD		dwReserv4;
} ApiItemInfo, *lpApiItemInfo;

/**
 * コピー・移動の方向
 */
typedef enum {
	ApiDirection_A2P,		// あふwからプラグインへ
	ApiDirection_P2A,		// プラグインからあふwへ
} ApiDirection;

/**
 * プラグイン情報を取得する。
 * @param[out] pluginInfo    プラグイン情報。
 */
void WINAPI ApiGetPluginInfo(lpApiInfo pluginInfo);

/**
 * プラグインオープンする。
 * @param[in]  szCommandLine プラグイン側に渡すコマンドライン。
 * @param[in]  afxwInfo      あふwの情報。
 * @param[out] openInfo      オープン情報。
 * @retval     0以外         プラグインで自由に使えるハンドル。その他APIのhandleとして使用する。
 * @retval     NULL(0)       オープン失敗。
 */
HAFX WINAPI ApiOpen(LPCWSTR szCommandLine, const lpAfxwInfo afxwInfo, lpApiOpenInfo openInfo);

/**
 * プラグインクローズする。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiClose(HAFX handle);

/**
 * szDirPathで指定された仮想ディレクトリパスの先頭アイテムを取得する。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  szDirPath     取得したいディレクトリフルパス。
 * @param[in]  szWildName    アイテムのワイルドカード指定。
 * @param[out] lpItemInfo    先頭アイテムの情報。
 * @retval     1             アイテムを見つけた場合
 * @retval     0             エラー
 * @retval     -1            検索終了
 */
int  WINAPI ApiFindFirst(HAFX handle, LPCWSTR szDirPath, /*LPCWSTR szWildName, #004 delete */ lpApiItemInfo lpItemInfo);

/**
 * ApiFindFirstで取得したアイテム以降のアイテムを取得する。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[out] lpItemInfo    先頭アイテムの情報。
 * @retval     1             アイテムを見つけた場合
 * @retval     0             エラー
 * @retval     -1            検索終了
 */
int  WINAPI ApiFindNext(HAFX handle, lpApiItemInfo lpItemInfo);

/**
 * プラグインからあふw側にアイテムをコピーする。
 * あふwでコピー処理をするときに呼び出される。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  szFromItem    コピー元のアイテム名。
 * @param[in]  szToPath      コピー先のフォルダ。
 * @param[in]  lpPrgRoutine  コールバック関数(CopyFileExと同様)
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiCopyTo(HAFX handle, LPCWSTR szFromItem, LPCWSTR szToPath, LPPROGRESS_ROUTINE lpPrgRoutine);

/**
 * あふwが内部的に利用するコピー処理。
 * 主にプラグイン内のファイルを開く場合に、AFXWTMP以下にコピーするために使われる。
 * ただし、実際にコピーするかどうかはプラグイン次第で、あふwはszOutputPathで指定されたファイルを開く。
 *
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  szFromItem    プラグイン内のアイテム名
 * @param[in]  szToPath      コピー先のフォルダ(c:\Program Files\AFXWTMP.0\hoge.txt等が指定される)
 * @param[out] szOutputPath  プラグインが実際にコピーしたファイルパス
 *                           szToPathにコピーする場合はszToPathをszOutputPathにコピーしてあふwに返す。
 *                           szToPathにコピーしない場合、あふwに開いてほしいファイルのパスを指定する。
 * @param[in]  dwOutPathSize  szOutputPathのバッファサイズ
 * @param[in]  lpPrgRoutine  コールバック関数(CopyFileExと同様)
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiIntCopyTo(HAFX handle, LPCWSTR szFromItem, LPCWSTR szToPath, LPWSTR szOutputPath, DWORD dwOutPathSize, LPPROGRESS_ROUTINE lpPrgRoutine);

/**
 * アイテムを削除する。
 * あふwで削除をするときに呼び出される。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  szItemPath    削除するアイテムのフルパス。
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiDelete(HAFX handle, LPCWSTR szItemPath);

/**
* アイテムを拡張子判別実行する。
* あふwでENTERを押したときに呼び出される。
* @param[in]  handle        ApiOpenで開いたハンドル。
* @param[in]  szItemPath    アイテムのフルパス。
* @retval     2             あふw側に処理を任せる。（ApiCopyでテンポラリにコピーしてから実行)
* @retval     1             成功
* @retval     0             エラー
*/
int  WINAPI ApiExecute(HAFX handle, LPCWSTR szItemPath);

/**
* アイテムを拡張子判別実行する。
* あふwでSHIFT-ENTERを押したときに呼び出される。
* @param[in]  handle        ApiOpenで開いたハンドル。
* @param[in]  szItemPath    アイテムのフルパス。
* @retval     2             あふw側に処理を任せる。（ApiCopyでテンポラリにコピーしてから実行)
* @retval     1             成功
* @retval     0             エラー
*/
int  WINAPI ApiExecute2(HAFX handle, LPCWSTR szItemPath);


//------------------------------ 以下ポストローンチ --------------------------------

/**
 * あふw側からプラグインにアイテムをコピーする。
 * あふwでコピー処理をするときに呼び出される。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  szFromItem    コピー元のアイテム名。
 * @param[in]  szToPath      コピー先のフォルダ。
 * @param[in]  lpPrgRoutine  コールバック関数(CopyFileExと同様)
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiCopyFrom(HAFX handle, LPCWSTR szFromItem, LPCWSTR szToPath, LPPROGRESS_ROUTINE lpPrgRoutine);

/**
 * アイテムを移動する。
 * あふwで移動処理をするときに呼び出される。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  szFromPath    移動元のフルパス。
 * @param[in]  szToPath      移動先のフルパス。
 * @param[in]  direction     ApiDirection_A2Pはあふwからプラグイン側に移動する場合。
 *                           ApiDirection_P2Aはプラグイン側からあふwに移動する場合。
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiMove(HAFX handle, LPCWSTR szFromPath, LPCWSTR szToPath, ApiDirection direction);

/**
 * アイテムをリネームする。
 * あふwでリネームをするときに呼び出される。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  szFromPath    リネーム前のフルパス。
 * @param[in]  szToName      リネーム後のファイル名。
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiRename(HAFX handle, LPCWSTR szFromPath, LPCWSTR szToName);

/**
 * ディレクトリを作成する。
 * あふwでディレクトリを作成をするときに呼び出される。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  szItemPath    作成するディレクトリのフルパス。
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiCreateDirectory(HAFX handle, LPCWSTR szItemPath);

/**
 * ディレクトリを削除する。
 * あふwでディレクトリを削除をするときに呼び出される。
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  szItemPath    削除するディレクトリのフルパス。
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiRemoveDirectory(HAFX handle, LPCWSTR szItemPath);

/**
 * コンテキストメニュー表示
 * @param[in]  handle        ApiOpenで開いたハンドル。
 * @param[in]  hWnd          あふwのウィンドウハンドル。
 * @param[in]  x             メニュー表示X座標。
 * @param[in]  y             メニュー表示Y座標。
 * @param[in]  szItemPath    アイテムのフルパス。
 * @retval     2             あふw側に処理を任せる。（ApiCopyでテンポラリにコピーしてからコンテキストメニュー?)
 * @retval     1             成功
 * @retval     0             エラー
 */
int  WINAPI ApiShowContextMenu(HAFX handle, const HWND hWnd, DWORD x, DWORD y, LPCWSTR szItemPath);

#pragma pack(pop)
#endif	/* __AFXWAPI__ */

